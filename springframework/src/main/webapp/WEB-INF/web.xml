<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://xmlns.jcp.org/xml/ns/javaee" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd" version="4.0">
  <!-- root webApplicationContext 없어도됨
 1)  WAS가 web.xml의 listener 태그를 해석할때 contextLoaderLister객체 생성
  2) ContextLoaderLister객체는 내부에 Root webApplicationContext 생성
  3) Root webApplicationContext 는 관리할 객체(빈) 설정 파일의 경로를 param-value태그에서 찾음
   -->
  <listener>
  	<listener-class>
  		org.springframework.web.context.ContextLoaderListener
  	</listener-class>
  </listener>
  <context-param>
  <!-- Root webApplicationContext가 사용할 빈 설정 파일 위치 -->
  	<param-name>contextConfigLocation</param-name>
  	<!-- <param-value>/WEB-INF/spring/root/config.xml</param-value> -->
  	<!-- classpath는 WAR 파일 내부의 WEB-INF/classes폴더를 말함 -->
  	<!-- src/main/java, src/main/resources 폴더의 내용들이 취합되어 classes에 들어감 -->
	<param-value>classpath:spring/root/*.xml</param-value> 
  </context-param>
  
  <!--[필수] =============================================== -->
  <!-- 
  1)was가 web.xml의 servlet태그를 해석할떄 DiispatcherServlet 객체생성
  2)DispathcherServlet객체는 내부에 webApplicationContext 생성
   3)webApplicationContext 는 관리할 객체(빈) 설정 파일의 경로를 param-value태그에서 찾음-->
  <servlet>
  	<servlet-name>dispatcher</servlet-name>
  	<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
  	<init-param>
  		<param-name>contextConfigLocation</param-name>
  		<param-value>classpath:spring/dispatcher/*.xml</param-value>
  	</init-param>
  	<init-param>
  		<param-name>throwExceptionIfNoHandlerFound</param-name>
  		<param-value>true</param-value>
  	</init-param>
  	
  	
  	
  	<load-on-startup>1</load-on-startup><!--was가 해석할때 만들어짐 없으면 만들어지는 시점 달라짐 브라우저가 처음 요청할때 (클라이언트가 최초로 요청했을때)-->
  
  <!-- multipart/form-data를 해석하기 위한 설정-->
	<multipart-config>
		<location>C:/Temp</location> <!-- 임시 파일이 저장될 폴더의 절대 경로만 가능 -->
		<max-file-size>20971520</max-file-size><!-- 20MB까지 허용 -->
		<max-request-size>104857600</max-request-size>
		<file-size-threshold>1024</file-size-threshold><!-- 단위가 바이트 -->
	</multipart-config>

  </servlet>
  
  <!-- 브라우저(클라이언트)가 요청하는 모든 URL을 DispatcherServlet이 처리하도록 설정 -->
  <servlet-mapping><!-- http://8080/springframework/ -->
  	<servlet-name>dispatcher</servlet-name>
  	<url-pattern>/</url-pattern><!-- 서블릿 여러개일때 달라야함 -->
  </servlet-mapping>
  
  <!-- [필수]=================================================== -->
  <!-- 필터 작성된 순서대로 동작함. -->
  <!-- Filter의 역할: DispatcherServlet이 실행되기전에 전처리하는 역할 
  CharacterEncodingFilter의 역할: DispatcherServlet이 실행되기전에 한글 데이터를 복원하는 역할-->
  <filter>
  	<filter-name>charaterEncodingFilter</filter-name>
  	<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
  	<init-param>
  			<param-name>encoding</param-name>
  			<param-value>UTF-8</param-value>
  	</init-param>
  </filter>
  <!-- 브라우저(클라이언트)가 요청하는 모든 url에 대해서 charaterEncodingFilter가 동작하도록 설정 -->
  <filter-mapping>
  		<filter-name>charaterEncodingFilter</filter-name>
  		<url-pattern>/*</url-pattern><!-- 모든 요청이 들어올때 필터가 먼저 동작을 하겠다!! -->
  </filter-mapping>
  
  <!-- 로그인을 체크하는 필터 등록 -->
<!--   <filter>
  	<filter-name>LoginCheckFilter</filter-name>
  	<filter-class>com.mycompany.springframework.filter.LoginCheckFilter</filter-class>
  </filter>
  <filter-mapping>
  	<filter-name>LoginCheckFilter</filter-name>
  	<url-pattern>/*</url-pattern>
  </filter-mapping> -->
  
  <!-- Spring Security 구동을 위한 필터 등록 -->
	<filter>
       <!-- filter-name은 예약어로 임의 설정(변경) 불가 -->
       <filter-name>springSecurityFilterChain</filter-name>
      <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
    </filter>
    <filter-mapping>
       <filter-name>springSecurityFilterChain</filter-name>
       <url-pattern>/*</url-pattern>
    </filter-mapping>
  
  
  <!-- 
  <error-page>
  	<error-code>404</error-code>
  	<location>/WEB-INF/views/ch10/404.jsp</location>
  </error-page>
   -->
</web-app>